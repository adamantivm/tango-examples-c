# DEPENDS FILE AUTOGENERATED BY AndroidTools.cmake, DO NOT EDIT.
module_name := motion_tracking_jni_example
src := jni_interface.cc motion_tracking_app.cc pose_data.cc scene.cc tango_event_data.cc

# Import all of the dependencies BEFORE the user defines the new module.
# This is non-standard (normally would list modules at end) and clobbers
# LOCAL_PATH. But it allows us to collect all the imported prebuilt library
# names in the REDWOOD variables.
depends := tango_client_api tango_service_binder tango_client_api_header gtest_catkin glog_catkin gflags_catkin egl_texture android_system_libs android_kernel_headers
MY_LOCAL_PATH := $(LOCAL_PATH)
$(foreach depend,$(depends),$(eval $(call import-module,$(depend))))
LOCAL_PATH := $(MY_LOCAL_PATH)
# Unset so any Android.mk's still doing the above don't double-load modules.
depends :=

# NDK considers it an error to enable NEON for arm64-v8a (??), but we do want
# it on all supported platforms.
ifeq ($(TARGET_ARCH_ABI),$(filter $(TARGET_ARCH_ABI), armeabi-v7a x86))
LOCAL_ARM_NEON := true
endif

# Collect all shared libraries in correct loading order and export them as an
# Android string array resource. The Java main application then just needs to
# loadLibrary() looping over R.array.shared_libraries, rather than having the
# libraries hard-coded.
libraries := $(REDWOOD_SHARED_LIBRARIES) $(module_name)
define library_item_xml
       <item>$(item)</item>

endef
define shared_libraries_xml
<?xml version="1.0" encoding="utf-8"?>
<!-- Auto-generated by depends.inc, DO NOT EDIT. -->
<resources>
    <string-array name="shared_libraries">
 $(foreach item,$(libraries),$(library_item_xml))    </string-array>
</resources>
endef
export shared_libraries_xml
libraries_resource_dir := $(LOCAL_PATH)/../res/values
libraries_resource_file := $(libraries_resource_dir)/shared-libraries.xml
$(libraries_resource_file):
	mkdir -p $(libraries_resource_dir)
	echo "$$shared_libraries_xml" > $@
all: $(libraries_resource_file)

profiling = 
ifdef profiling
$(info Doing a profile build)
# Don't strip debug symbols out of library packaged in APK.
cmd-strip :=
endif

# Required by Intel TBB library.
LOCAL_CPPFLAGS := -DTBB_PREVIEW_GRAPH_NODES=1
LOCAL_CFLAGS := $(LOCAL_CPPFLAGS)

# HACK: ndk-build does not deduplicate compiler and linker flags. With enough
# package dependencies, this leads to "Argument list too long" errors, mainly
# due to an explosion of -I/include/dir flags. We work around by over-riding
# an internal function of ndk-build (see definitions-host.mk) to deduplicate the
# includes list as used in the build rules.
# Note that remove-duplicates provided by the NDK (definitions-utils.mk) is
# broken, as it will omit any tokens that are a substring (but not an exact
# match) of a previous token. So we copy our own version here, using filter
# instead of findstring.
redwood-remove-duplicates = $(strip \
  $(eval __uniq_ret :=) \
  $(foreach __uniq_item,$1,\
    $(if $(filter $(__uniq_item),$(__uniq_ret)),,\
      $(eval __uniq_ret += $(__uniq_item))\
    )\
  )\
  $(__uniq_ret))

override host-c-includes = $(call redwood-remove-duplicates,$(1:%=-I%))
